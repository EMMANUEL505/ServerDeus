@model HefestoServer.Models.Device_Information

@{
    ViewBag.Title = "Edit";
}
         @{
             ViewBag.id = Model.Device_Id;
            }
<h2>Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Device</legend>
         <div class="editor-label">
            @Html.HiddenFor(model => model.Device_Id)
            @Html.DisplayFor(model => model.Device_Id)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Device_Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Device_Name)
            @Html.ValidationMessageFor(model => model.Device_Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Device_Lat)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Device_Lat)
            @Html.ValidationMessageFor(model => model.Device_Lat)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DEvice_Long)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DEvice_Long)
            @Html.ValidationMessageFor(model => model.DEvice_Long)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Device_Email)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Device_Email)
            @Html.ValidationMessageFor(model => model.Device_Email)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Device_Zone)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Device_Zone)
            @Html.ValidationMessageFor(model => model.Device_Zone)
        </div>

      <div class="editor-label">
            @Html.LabelFor(model => model.Device_Mode)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Device_Mode, new List<SelectListItem>  
                {   new SelectListItem { Text = "Timming mode", Value = "1"},  
                    new SelectListItem { Text = "Manual mode", Value = "2"},  
                    new SelectListItem { Text = "Automated mode", Value = "3"}  
                }, "Select mode", new { @onchange = "toggleDIvDisplay(this.value)"})  
            @Html.ValidationMessageFor(model => model.Device_Mode)
        </div>

        <div id="divport" hidden="hidden">
        <div id="divtimming" hidden="hidden">
                <h1>Timming</h1>
                <div class="editor-label">
                   @Html.LabelFor(model => model.Device_OnTime)
                </div>
                <div class="editor-field">
                   @Html.EditorFor(model => model.Device_OnTime)
                   @Html.ValidationMessageFor(model => model.Device_OnTime)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Device_OffTime)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Device_OffTime)
                    @Html.ValidationMessageFor(model => model.Device_OffTime)
                </div>
       </div>
       <div id="divautomated" hidden="hidden">
                <h1>Automated</h1>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Device_SetPoint)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Device_SetPoint,new { htmlAttributes = new { @class = "form-control", @Value = "12" } })
                    @Html.ValidationMessageFor(model => model.Device_Histerresys)
                </div>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Device_Histerresys)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.Device_Histerresys)
                    @Html.ValidationMessageFor(model => model.Device_Histerresys)
                </div>
      
               <div class="editor-label">
                    @Html.LabelFor(model => model.Device_Port_In)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Device_Port_In, new List<SelectListItem>  
                {   new SelectListItem { Text = "A = 0 , B = 0", Value = "0"},  
                    new SelectListItem { Text = "A = 0 , B = 1", Value = "1"},  
                    new SelectListItem { Text = "A = 1 , B = 0", Value = "2"},  
                    new SelectListItem { Text = "A = 1 , B = 1", Value = "3"} 
                },"Select mode")
                    @Html.ValidationMessageFor(model => model.Device_Port_In)
                </div>
       </div>
                      <div class="editor-label">
                    @Html.LabelFor(model => model.Device_Port_On_Over)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Device_Port_On_Over, new List<SelectListItem>  
                {   new SelectListItem { Text = "A = 0 , B = 0", Value = "0"},  
                    new SelectListItem { Text = "A = 0 , B = 1", Value = "1"},  
                    new SelectListItem { Text = "A = 1 , B = 0", Value = "2"},  
                    new SelectListItem { Text = "A = 1 , B = 1", Value = "3"} 
                },"Select mode")
                    @Html.ValidationMessageFor(model => model.Device_Port_On_Over)
                </div>
               <div class="editor-label">
                    @Html.LabelFor(model => model.Device_Port_Off_Under)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Device_Port_Off_Under, new List<SelectListItem>  
                {   new SelectListItem { Text = "A = 0 , B = 0", Value = "0"},  
                    new SelectListItem { Text = "A = 0 , B = 1", Value = "1"},  
                    new SelectListItem { Text = "A = 1 , B = 0", Value = "2"},  
                    new SelectListItem { Text = "A = 1 , B = 1", Value = "3"} 
                },"Select mode")
                    @Html.ValidationMessageFor(model => model.Device_Port_Off_Under)
                </div>
       </div>
       <div id="divmanual" hidden="hidden">
                <h1>Manual</h1>
                <div class="editor-label">
                    @Html.LabelFor(model => model.Device_Status)
                </div>
                <div class="editor-field">
                    @Html.DropDownListFor(model => model.Device_Status, new List<SelectListItem>  
                {   new SelectListItem { Text = "A = 0 , B = 0", Value = "0"},  
                    new SelectListItem { Text = "A = 0 , B = 1", Value = "1"},  
                    new SelectListItem { Text = "A = 1 , B = 0", Value = "2"},  
                    new SelectListItem { Text = "A = 1 , B = 1", Value = "3"} 
                },"Select mode")
                    @Html.ValidationMessageFor(model => model.Device_Status)
                </div>
       </div>
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<body onload="initMap()">
    <div id="map_canvas"></div>
 
</body>

    <style type="text/css">
        #map_canvas {height:400px;width:460px}
    </style>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script type="text/javascript">
        var map;
        var markersArray = [];

        function initMap()
        {
            var lat = document.getElementById("Device_Lat").value;
            var lng = document.getElementById("DEvice_Long").value;
            var latlng = new google.maps.LatLng(lat, lng);

            var myOptions = {
                zoom: 15,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

            var marker = new google.maps.Marker({
                position: map.getCenter(),
                map: map
            });

            // add marker in markers array
            markersArray.push(marker);

            // add a click event handler to the map object
            google.maps.event.addListener(map, "click", function(event)
            {
                // place a marker
                placeMarker(event.latLng);

                // display the lat/lng in your form's lat/lng fields
                document.getElementById("Device_Lat").value = event.latLng.lat();
                document.getElementById("DEvice_Long").value = event.latLng.lng();
            });

        }
        function placeMarker(location) {
            // first remove all markers if there are any
            deleteOverlays();

            var marker = new google.maps.Marker({
                position: location, 
                map: map
            });

            // add marker in markers array
            markersArray.push(marker);

            //map.setCenter(location);
        }

        // Deletes all markers in the array by removing references to them
        function deleteOverlays() {
            if (markersArray) {
                for (i in markersArray) {
                    markersArray[i].setMap(null);
                }
            markersArray.length = 0;
            }
        }
    </script>

<script type="text/javascript">
    $(document).ready(function () {
        var data = get_LatLng();
        $("#DEvice_Long").val(data);
    });
</script>
<script type="text/javascript">
    function toggleDIvDisplay(e) {
        var lat = document.getElementById("Device_Lat").value;
        if (e == 1) {
            $('#divport').show();
            $('#divtimming').show();
            $('#divautomated').hide();
            $('#divmanual').hide();
            /*var nodes = document.getElementById("divautomated").getElementsByTagName('*');
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].disabled = true;
            }
            var nodes = document.getElementById("divmanual").getElementsByTagName('*');
            for (var i = 0; i < nodes.length; i++) {
                nodes[i].disabled = true;
            }*/
        }
        else if (e == 2) {
            $('#divport').hide();
            $('#divtimming').hide();
            $('#divautomated').hide();
            $('#divmanual').show();

        }
        else if (e == 3) {
            $('#divport').show();
            $('#divtimming').hide();
            $('#divautomated').show();
            $('#divmanual').hide();
        }
        else {
            $('#divport').hide();
            $('#divtimming').hide();
            $('#divautomated').hide();
            $('#divmanual').hide();
        }
    }</script>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
